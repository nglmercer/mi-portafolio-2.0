---
import type { ImageMetadata } from "astro";
import path from "path";

interface Props {
  id?: string;
  src: any;
  class?: string;
  alt?: string;
  basePath?: string;
}

import { Image } from 'astro:assets';
import { url } from "../../utils/url-utils";

const { id, src, alt, basePath = '/' } = Astro.props;
const className = Astro.props.class;

// Determine if src is a local file
const isLocal = !(src.startsWith('/') || src.startsWith('http') || src.startsWith('https') || src.startsWith('data:'));
const isPublic = src.startsWith('/');

let img: ImageMetadata | undefined;

if (isLocal) {
  const files = import.meta.glob<ImageMetadata>("../../**/*.{jpg,jpeg,png,gif,webp}", { import: 'default' });
  let normalizedPath = path.normalize(path.join("../../", basePath, src)).replace(/\\/g, "/");

  console.log("Normalized Path: ", normalizedPath);
  console.log("Available Files: ", Object.keys(files));

  const loadImg = files[normalizedPath];

  if (loadImg) {
    img = await loadImg();
  } else {
    console.error(`Image not found at path: ${normalizedPath}`);
  }
}

---
<div class:list={[className, 'overflow-hidden relative']}>
  <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
  {isLocal && img && <Image src={img} alt={alt || ""} class="w-full h-full object-center object-cover" />}
  {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class="w-full h-full object-center object-cover" />}
  {isLocal && !img && <div class="w-full h-full flex justify-center items-center text-red-500">Image not found</div>}
</div>